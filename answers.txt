Name: Caroline
UCLA ID: 204163619


-------------------------------------------------------------------------------

Response to Exercise 1:
Yes! In the INT_SYS_GETPID clause, we save the current pid in the eax register.
Although schedule() might execute a process that will overwrite the value in 
the eax register later, schedule() does context switching, so that any value 
that was initially stored in the registers will be restored after it returns.


Response to Exercise 2:
Look for code in do_fork() and copy_stack()


Response to Exercise 3:
I added an extra field in the process_t structure in mpos-kern.h called p_wait,
which holds the id of a process. This allows every process to have a pid of a 
process that has called sys_wait() on it. Its initial value is set to be 0, 
which assumes that there are no processes waiting on it.

When sys_wait() is called by a process, its status will be changed to P_BLOCKED
and the p_wait field will be updated to the process it's waiting on. A call to
schedule() will ignore the waiting (blocked) process.

If two processes call sys_wait on the same pid, then only one of the processes
will be able to wait for it, while the other process will be returned the value
-1, as per mpos-app.h


Response to Exercise 4:
The reason old, dead processes weren't being cleaned up was because when a 
process was finished and it called sys_exit(), we were setting the process 
status to P_ZOMBIE. After changing it to P_EMPTY, the application count up to 
1024.


Anything else you'd like us to know:
-------------------------------------------------------------------------------



Extra credit exercises:
-------------------------------------------------------------------------------
Response to Exercise 5: 
The issue that we face essentially results in pointers. When we copy the stack,
normal variables are copied as intended and as expected. However, when pointer
values are also stored on the stack, when copying the stack as we do in 
sys_fork(), the newly created pointer still ends up pointing to the original
variable from the first process. We can exploit this in miniProcOS, as shown in
the start function below.

We need to use the volatile keyword because we don't want the compiler to try
to optimize the ptr pointer. We want ptr to point to the original x in the
parent process, but the optimizer might attempt to point ptr to the x in the 
child process.


void start (void) {
    int x = 0;
    int* volatile ptr = &x;

    pid_t p = sys_fork();
    if (p == 0) {
        x++;
        if (*ptr == 0)
            *ptr += 1; 
    }
    else if (p > 0)
        sys_wait(p); // assume blocking implementation
    app_printf("%d", x);
    sys_exit(0);
}


Response to Exercise 6:
This function should be fairly similar to our do_fork() function, because it is
essentially a "create new process" function except with threads rather than 
processes. If we want to create a new thread, we can replace do_fork() in the
interrupt method to sys_newthread(). However, we will still need to:
    
    1. Find an empty process.
    2. Set up the empty process.

The main difference comes in part 2, because the process begins with an empty
stack. We can't just copy the registers anymore - we need to also consider 
where the registers need to point. Just like in the do_fork() method, eax
should be 0 afterwards, but eip should begin at start_function to begin running
start_function for the thread. To do this, I modified the code in the files as
shown below.

mpos.h:17                   defined INT_SYS_NEWTHREAD = 53
mpos-app.h: 166 - 186       defined sys_newthread(pid)
mpos-kern.c: 213 - 247      defined case INT_SYS_NEWTHREAD


Response to Exercise 7:
This function can be written as a mixture between sys_wait and sys_exit. For
the most part, it will act as sys_wait, but the final removal of the program 
should be similar to sys_exit. The code that I modified is shown below.

mpos.h:18                   defined INT_SYS_KILL = 54
mpos-app.h: 
mpos-kern.c: 249 - 280      defined case INT_SYS_KILL